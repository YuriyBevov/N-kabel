"use strict";

(function () {
  const picker = document.querySelectorAll(".cable-description__pick-list input");
  const descriptionItem = document.querySelectorAll(".cable-description__description-item");

  for (let i = 1; i < descriptionItem.length; i++) {
    descriptionItem[i].style.display = 'none';
  }

  const onClickHandler = function () {
    const itemId = this.getAttribute('data-id');

    for (let i = 0; i < descriptionItem.length; i++) {
      descriptionItem[i].style.display = 'none';
      descriptionItem[itemId].style.display = 'block';
    }
  }

  for (let i = 0; i < picker.length; i++) {
    picker[i].addEventListener('click', onClickHandler);
  }
})();

"use strict";

(function() {
  const select = document.querySelector('.contacts__select');
  const content = document.querySelectorAll('.contacts__content');

  const onChangeHandler = function () {
    let attr = this.options[select.selectedIndex].id;

    for (let i = 0; i < content.length; i++) {
      content[i].style.display = 'none';
      content[attr].style.display = 'flex';
    }
  }

  if (select) {
    select.addEventListener('change', onChangeHandler)
  }
})();

"use-strict";

(function() {
  const fileInput = document.getElementById('footer-form-file-upload');
  const fileName = document.querySelector('.footer-form__upload-files');

  if (fileInput) {
    fileInput.addEventListener('change', function(event) {
      const input = event.target;

      for (let i = 0; i < input.files.length; i++) {
        fileName.textContent = input.files[i].name;
      }
    });
  }
})();

"use strict";

(function () {
  const btn =  document.querySelectorAll('.geo-position__item-extra-btn');

  const closeGeoList = function () {
    for (let i = 0; i < btn.length; i++) {
      btn[i].removeEventListener('click', closeGeoList);
      btn[i].addEventListener('click', openGeoList);
    };
    this.nextElementSibling.classList.add('hidden');
  }

  const openGeoList = function () {
    for (let i = 0; i < btn.length; i++) {
      if(!(btn[i].nextElementSibling.classList.contains('hidden'))) {
        btn[i].nextElementSibling.classList.add('hidden');
      }
    };

    this.removeEventListener('click', openGeoList);
    this.nextElementSibling.classList.remove('hidden');
    this.addEventListener('click', closeGeoList);
  };

  if(btn) {
    for (let i = 0; i < btn.length; i++) {
      btn[i].nextElementSibling.classList.add('hidden');
      btn[i].addEventListener('click', openGeoList);
    };
  }
})();

"use strict";

(function () {
  const ESC_KEYCODE = 27;

  const openBtn = document.getElementById("menu-show-btn");
  const closeBtn = document.getElementById("menu-close-btn");
  const nav = document.querySelector(".nav");
  const overflow = document.querySelector(".nav__wrapper");

  const companyItem = document.querySelector(".nav__item--company");
  const companyBtn = companyItem.querySelector(".nav__link--company");
  const companyList = companyItem.querySelector('ul');

  nav.classList.add("closed"); // закрываю меню после загрузки страницы
  companyList.classList.add('closed'); // закрываю подменю после загрузки страницы

  // удаление слушателей с документа, возвращение первоначального вида

  const removeEventListeners = function () {
    document.removeEventListener('click', hideByClick);
    document.removeEventListener('keydown', hideByEsc);

    if(!companyList.classList.contains('closed')) {
      companyList.classList.add('closed');
    }
    openBtn.addEventListener('click', openMenuByClick);
  }

  const showCompanyList = function() {
    companyList.classList.toggle('closed');
  }

  const openMenuByClick = function (evt) {
    evt.stopPropagation();
    nav.classList.remove("closed");
    document.addEventListener('click', hideByClick);
    document.addEventListener('keydown', hideByEsc);

    openBtn.removeEventListener('click', openMenuByClick);
    closeBtn.addEventListener('click', closeMenuByClick);
  }

  const closeMenuByClick = function () {
    nav.classList.add("closed");

    if(!companyList.classList.contains('closed')) {
      companyList.classList.add('closed');
    }

    closeBtn.removeEventListener('click', closeMenuByClick);
    removeEventListeners();
    openBtn.addEventListener('click', openMenuByClick);
  }

  //--- функции закрытия по клику и пустому месту

  const hideByClick = function (evt) {
    const nav__menu = evt.target == nav || nav.contains(evt.target);

    if (!nav__menu) {
      nav.classList.add('closed');

      removeEventListeners();
    }
  }

  const hideByEsc = function (evt) {
    if (evt.keyCode === ESC_KEYCODE) {
      nav.classList.add('closed');

      removeEventListeners();
    }
  };

  openBtn.addEventListener('click', openMenuByClick);
  companyBtn.addEventListener('click', showCompanyList);
})();

"use strict";

(function () {
  const loader = document.querySelector('.loader');

  const hideLoader = function () {
    setTimeout(endLoading, 700)
    function endLoading () {
      loader.style.display = 'none';
      clearTimeout(hideLoader);
      document.removeEventListener('DOMContentLoaded', hideLoader);
    }
  };

  document.addEventListener("DOMContentLoaded", hideLoader);
})();

"use strict";

(function () {
  const ESC_KEYCODE = 27;

  const orderBtn = document.querySelectorAll('.order-btn');
  const orderModal = document.querySelector(".order-modal");
  const feedbackBtn = document.querySelectorAll('.feedback__btn');
  const feedbackModal = document.querySelector(".feedback-modal");

  let modal = null;

  const removeEventListeners = function () {
    document.removeEventListener('click', hideByClick);
    document.removeEventListener('keydown', hideByEsc);
  }

  const showByClick = function (el) {
    el.classList.remove('hidden')

    document.addEventListener('click', hideByClick);
    document.addEventListener('keydown', hideByEsc);
  }

  const hideByClick = function (evt) {
    if(evt.target === modal) {
      modal.classList.add('hidden');

      removeEventListeners();
      modal = null;
    }
  }

  const hideByEsc = function (evt) {
    if (evt.keyCode === ESC_KEYCODE) {
      modal.classList.add('hidden');

      removeEventListeners();
      modal = null;
    }
  };

  for (let i = 0; i < orderBtn.length; i++) {
    orderBtn[i].addEventListener('click', function (evt) {
      evt.preventDefault();
      modal = orderModal;
      showByClick(modal);
    })
  }

  for (let i = 0; i < feedbackBtn.length; i++) {
    feedbackBtn[i].addEventListener('click', function (evt) {
      evt.preventDefault();
      modal = feedbackModal;
      showByClick(modal);
    })
  }

  const fileUpload = document.querySelector('.modal__group--upload input');
  const fileName = document.querySelector('.modal__group--upload p');

  if (fileUpload) {
    fileUpload.addEventListener('change', function(event) {
      const input = event.target;

      for (let i = 0; i < input.files.length; i++) {
        fileName.textContent = input.files[i].name;
      }
    });
  }
})();

"use strict";

(function() {

  Modernizr.on('webp', function() {
  });

})();

"use strict";

(function (){
  const pagination = document.querySelector(".pagination");

  if(pagination) {
    const showMoreBtn = pagination.querySelector(".pagination__show-btn");
    const btnAfter = document.querySelector(".pagination__btn-after");
    const btnBefore = document.querySelector(".pagination__btn-before");
    const btnPrev = document.querySelector(".pagination__btn-prev");
    const btnNext = document.querySelector(".pagination__btn-next");

    pagination.classList.add("hidden");

    // количество элементов в списке над пагинацией
    const item = pagination.previousElementSibling.children;

    let itemCountToDraw = 12;
    let itemsToShowFrom = 0;
    let itemsToShowTo = itemsToShowFrom + itemCountToDraw;
    let curBtnId = 0;
    const btnCountStep = 10;
    let btnCount = btnCountStep - 1;

    // вычисляю сколько должно быть страниц(кнопок) в пагинации
    const paginationBtnCount = Math.ceil(item.length / itemCountToDraw);

    // скрытие лишних элементов списка, стартовое создание и отрисовка кнопок пагинации

    const startDrawing = function () {
      if(item.length > itemCountToDraw) {
        pagination.classList.remove("hidden");

        for (let i = 0; i < item.length; i++) {
          item[i].classList.add("hidden");
        }

        for (let i = 0; i < itemCountToDraw; i++) {
          item[i].classList.remove("hidden");
        }

        for (let i = 0; i < paginationBtnCount; i++) {
          const btn = document.createElement("a");

          btn.setAttribute("href", "#");
          btn.setAttribute("data-id", i);
          btn.className = "pagination__btn";
          btn.textContent = i + 1;
          btnAfter.before(btn);
        }

        btnPrev.setAttribute("disabled", "disabled");
      }
    }();

    const paginationBtn = pagination.querySelectorAll(".pagination__btn");

    const startDrawPagBtns =  function () {
      for (let i = 0; i < paginationBtn.length; i++) {
        paginationBtn[0].classList.add("active");
        paginationBtn[i].addEventListener("click", onPaginationBtnClickHandler);
      }

      if(paginationBtn.length > btnCountStep) {
        for (let i = btnCount; i < paginationBtn.length; i++) {
          paginationBtn[i].classList.add("hidden");
        }
      }
    };

    // функции фильтрации

    const updateItemsToDraw = function (from, to) {

      for (let i = 0; i < item.length; i++) {
        if(!item[i].classList.contains("hidden")) {
          item[i].classList.add("hidden")
        }
      }

      if (item.length - to < 0) {
        let residue = item.length - (to - itemCountToDraw);
        to = (to - itemCountToDraw) + residue;
        drawFunc(from, to, item);
      } else {
        drawFunc(from, to, item);
      }
    }

    function drawFunc (from, to, el) {
      console.log('drawFunc')
      for (let i = from; i < to; i++) {
        el[i].classList.remove("hidden");
      }
    }

    function hideFunc (from, to, el) {
      console.log('hideFunc')
      for (let i = from; i < to; i++) {
        el[i].classList.add("hidden");
      }
    }

    // ф-и активности и отрисовки кнопок

    function setActive(el) {
      if(el.hasAttribute("disabled")) {
        el.removeAttribute("disabled")
      }
    }

    function setInactive(el) {
      if(!el.hasAttribute("disabled")) {
        el.setAttribute("disabled", "disabled")
      }
    }

    function showElem(el) {
      if(el.classList.contains("hidden")) {
        el.classList.remove("hidden");
      }
    }

    function hideElem(el) {
      if(!el.classList.contains("hidden")) {
        el.classList.add("hidden");
      }
    }

    function setActivePaginationBtn(id) {
      for(let i = 0; i < paginationBtn.length; i++) {
        if(paginationBtn[i].classList.contains("active")) {
          paginationBtn[i].classList.remove("active");
        }
      }
      paginationBtn[id].classList.add("active");
    }

    // ф-я фильтрации рядов кнопок(btnCount)

    function nextBtnRow() {
      // ф-я скрытия предыдущего ряда

      let startBtnToHide = 0;
      let lastBtnToHide = btnCount

      if( btnCount - btnCountStep > 0 ) {
        startBtnToHide = btnCount - btnCountStep;
      } else {
        let residue = btnCountStep - btnCount;
        startBtnToHide = (btnCount + residue) - btnCountStep;
      }

      hideFunc(startBtnToHide, lastBtnToHide, paginationBtn);

      // ф-я отрисовки нового ряда

      let startBtnToDraw = btnCount;
      btnCount += btnCountStep;

      let lastBtnToDraw = btnCount;

      if (paginationBtn.length - lastBtnToDraw < 0 ) {
        lastBtnToDraw = paginationBtn.length;
        hideElem(btnAfter);
        setInactive(showMoreBtn);
        drawFunc(startBtnToDraw, lastBtnToDraw, paginationBtn);
      } else {
        drawFunc(startBtnToDraw, lastBtnToDraw, paginationBtn);
      }
    }

    function prevBtnRow() {

      let startBtnToHide = btnCount - btnCountStep;
      let lastBtnToHide = btnCount;

      if( paginationBtn.length - btnCount < 0 ) {
        lastBtnToHide = paginationBtn.length;
        setActive(showMoreBtn);
        showElem(btnAfter);
      }

      hideFunc(startBtnToHide, lastBtnToHide, paginationBtn);

      let startBtnToDraw = (curBtnId - btnCountStep) + 1;
      let lastBtnToDraw = startBtnToDraw + btnCountStep;

      btnCount -= btnCountStep;

      if (startBtnToDraw < 0) {
        startBtnToDraw = 0;
        btnCount = btnCountStep - 1;
      }

      drawFunc(startBtnToDraw, lastBtnToDraw, paginationBtn);
    }

    // eventListeners

    const onShowMoreBtnClickHandler = function () {
      console.log("onShowMoreBtnClickHandler")

       // листает на след count


       console.log(" itemsToShowFrom--" + itemsToShowFrom);
       console.log(" itemsToShowTo--" + itemsToShowTo);
       console.log(" btnCount--" + btnCount);
       console.log("curBtnId --" + curBtnId);

       /*itemsToShowFrom += itemCountToDraw;
       itemsToShowTo += itemCountToDraw;

       updateItemsToDraw(firstItemToShow, itemsToShowTo);*/
    }

    const onAfterBtnClickHandler = function (evt) {
      evt.preventDefault();
      console.log("onAfterBtnClickHandler")

      // листает на последнюю стр-цу

      let startBtnToDraw = (Math.floor(paginationBtn.length / 10) * btnCountStep) - 1;
      let lastBtnToDraw = paginationBtn.length;
      let startBtnToHide = 0;
      let lastBtnToHide = startBtnToDraw;

      curBtnId = paginationBtn.length - 1;

      btnCount  =  (Math.floor(paginationBtn.length / 10) * btnCountStep) + (btnCountStep - 1);

      hideFunc(startBtnToHide, lastBtnToHide, paginationBtn);
      drawFunc(startBtnToDraw, lastBtnToDraw, paginationBtn);

      setActivePaginationBtn(curBtnId);
      hideElem(btnAfter);
      setInactive(btnNext);
      setInactive(showMoreBtn);
      setActive(btnPrev);

      itemsToShowFrom = Math.floor(item.length / itemCountToDraw) * itemCountToDraw;
      itemsToShowTo = itemsToShowFrom + itemCountToDraw;

      let lastItemToShow = itemsToShowTo;
      if (item.length < itemsToShowTo) {
        lastItemToShow = item.length
      }

      updateItemsToDraw(itemsToShowFrom, lastItemToShow);
    }

    const onBeforeBtnClickHandler = function (evt) {
      evt.preventDefault();
      console.log("onBeforeBtnClickHandler")

      // dont need
    }

    const onPrevBtnClickHandler = function () {
      console.log("onPrevBtnClickHandler")

      // должен листать 1 стр назад

      curBtnId--;
      setActivePaginationBtn(curBtnId);

      if(curBtnId === 0) {
        setInactive(btnPrev);
        setInactive(showMoreBtn);
      }

      setActive(btnNext);
      setActive(showMoreBtn);

      // проверка ряда

      if ((btnCount - curBtnId) === btnCountStep + 1) {
        prevBtnRow();
      }

      itemsToShowFrom -= itemCountToDraw;
      itemsToShowTo -= itemCountToDraw;

      updateItemsToDraw(itemsToShowFrom, itemsToShowTo);
    }

    const onNextBtnClickHandler = function () {
      console.log("onNextBtnClickHandler")

      // должен листать 1 стр вперед

      curBtnId++;
      setActivePaginationBtn(curBtnId);


      if(curBtnId === paginationBtn.length - 1) {
        console.log(curBtnId, paginationBtn.length)
        setInactive(btnNext);
        setInactive(showMoreBtn);
      } else {
        setActive(showMoreBtn);
      }

      setActive(btnPrev);

      if (btnCount === curBtnId) { // проверка ряда
        nextBtnRow();
      }

      /*console.log(" itemsToShowFrom--" + itemsToShowFrom);
      console.log(" itemsToShowTo--" + itemsToShowTo);
      console.log(" btnCount--" + btnCount);
      console.log("curBtnId --" + curBtnId);*/
      console.log("curBtnId --" + curBtnId);

      itemsToShowFrom += itemCountToDraw;
      itemsToShowTo += itemCountToDraw;

      updateItemsToDraw(itemsToShowFrom, itemsToShowTo);
    }

    const onPaginationBtnClickHandler = function (evt) {
      evt.preventDefault();
      console.log("onPaginationBtnClickHandler");

      // должен листать на тек-ю стр

      curBtnId = this.getAttribute("data-id");

      if (this.getAttribute("data-id") == 0) {
        setInactive(btnPrev);
      }

      console.log(paginationBtn.length)
      console.log(curBtnId)

      if (this.getAttribute("data-id") == paginationBtn.length - 1) {
        setInactive(showMoreBtn);
        setInactive(btnNext);
      } else {
        setActive(showMoreBtn);
        setActive(btnNext);
      }


      itemsToShowTo = (curBtnId * itemCountToDraw) + itemCountToDraw;
      itemsToShowFrom = curBtnId * itemCountToDraw;

      setActivePaginationBtn(curBtnId);

      updateItemsToDraw(itemsToShowFrom, itemsToShowTo);
    }



    showMoreBtn.addEventListener('click', onShowMoreBtnClickHandler);
    btnAfter.addEventListener('click', onAfterBtnClickHandler);
    btnBefore.addEventListener('click', onBeforeBtnClickHandler);
    btnPrev.addEventListener('click', onPrevBtnClickHandler);
    btnNext.addEventListener('click', onNextBtnClickHandler);

    startDrawPagBtns();
  }
})();

/*"use strict";

(function () {
  const pagination = document.querySelector(".pagination");

  if(pagination) {
    const showMoreBtn = pagination.querySelector(".pagination__show-btn");
    pagination.classList.add("hidden");

    const list = pagination.previousElementSibling;
    const btnAfter = document.querySelector(".pagination__btn-after");
    const btnBefore = document.querySelector(".pagination__btn-before");
    const btnPrev = document.querySelector(".pagination__btn-prev");
    const btnNext = document.querySelector(".pagination__btn-next");

    const item = list.querySelectorAll("li"); // не правильный селектор
    //console.log(item.length)
    const paginationBtnCount = Math.floor(( item.length - 1 ) / 10); // вычисляю сколько должно быть страниц(кнопок) в пагинации

    let itemsToShowFrom = 0;
    let itemsToShow = 10;
    let currentBtnId = 0;
    const step = 10;

    // если элементов > чем step показываю пагинацию и создаю нужное количество кнопок

    if (item.length > itemsToShow) {
      pagination.classList.remove("hidden");

      for (let i = itemsToShow; i < item.length; i++) {
        item[i].classList.add("hidden");
      }

      for (let i = 0; i <= paginationBtnCount; i++) {
        const btn = document.createElement("a");

        btn.setAttribute("href", "#");
        btn.className = "pagination__btn";
        btn.textContent = i + 1;

        btnAfter.before(btn);
      }
    }

    // функция отрисовки
    const showItems = function () {
      item.forEach(function(it) {
        if(!it.classList.contains("hidden")) {
          it.classList.add("hidden")
        }
      });

      for (let i = itemsToShowFrom; i < itemsToShow; i++) {
        item[i].classList.remove("hidden");
      }

      // отмечаю активную кнопку
      for (let i = 0; i < btn.length; i++) {
        if(btn[i].classList.contains("active")) {
          btn[i].classList.remove("active");
        }
      }
      btn[currentBtnId].classList.add("active");
    }
    // функция клика на кнопку показать еще
    const onShowMoreBtnClickHandler = function (evt) {
      evt.preventDefault();

      if (btnPrev.hasAttribute("disabled")) {
        btnPrev.removeAttribute("disabled");
      }

      itemsToShowFrom += step;
      currentBtnId += 1;

      let residue = item.length - itemsToShow;

      if (residue > step) {
        itemsToShow += step;

        showItems();
      } else {
        itemsToShow += residue;
        showMoreBtn.setAttribute("disabled", "disabled");
        btnNext.setAttribute("disabled", "disabled");
        showItems();
      }
    };
    // функция клика на кнопку пагинации
    const onClickShowItemsHandler = function (evt) {
      evt.preventDefault();

      btn.forEach(function(b) {
        if(b.classList.contains("active")) {
          b.classList.remove("active")
        }
      });
      this.classList.add("active");

      let itemsCount = this.getAttribute("id") * step;

      itemsToShowFrom = itemsCount;
      currentBtnId = itemsCount/step;

      if(item.length - (itemsCount + step) >= 0) {
        if (showMoreBtn.hasAttribute("disabled")) {
          showMoreBtn.removeAttribute("disabled");
          btnNext.removeAttribute("disabled");
        }
        itemsToShow = itemsCount + step;
      } else {
        itemsToShow = itemsCount + (item.length - itemsCount);
        showMoreBtn.setAttribute("disabled", "disabled");
        btnNext.setAttribute("disabled", "disabled");
      }

      if (currentBtnId === 0) {
        if (!btnPrev.hasAttribute("disabled")) {
          btnPrev.setAttribute("disabled", "disabled");
        }
      } else {
        if (btnPrev.hasAttribute("disabled")) {
          btnPrev.removeAttribute("disabled", "disabled");
        }
      }

      showItems();
    }

    let btnCheck = step;

    // функция клика на кнопку назад
    const onBtnPrevClickHandler = function (evt) {
      evt.preventDefault();

      if (btnNext.hasAttribute("disabled")) {
        btnNext.removeAttribute("disabled");
        showMoreBtn.removeAttribute("disabled");
      }

      if (currentBtnId > 0) {
        currentBtnId -= 1;
      }

      if (currentBtnId === 0) {
        btnPrev.setAttribute("disabled", "disabled");
      }

      itemsToShowFrom = currentBtnId * step;
      itemsToShow = itemsToShowFrom + step;

      showItems();
    }

    // функция клика на кнопку вперед
    const onBtnNextClickHandler = function (evt) {
      evt.preventDefault();

      if (btnPrev.hasAttribute("disabled")) {
        btnPrev.removeAttribute("disabled");
      }

      if (currentBtnId < paginationBtnCount) {
        currentBtnId += 1;

        itemsToShowFrom = currentBtnId * step;
        itemsToShow = itemsToShowFrom + step;
      }

      if(btnCheck - (currentBtnId + 1) === 1 ) {
        btnCheck += step;
        console.log(currentBtnId)
        console.log(btnCheck)
        onAfterBtnClickHandler();
      }


      if (currentBtnId === paginationBtnCount) {
        btnNext.setAttribute("disabled", "disabled");
        showMoreBtn.setAttribute("disabled", "disabled");

        currentBtnId = paginationBtnCount;
        itemsToShowFrom = currentBtnId * step;
        itemsToShow = itemsToShowFrom + (item.length - itemsToShowFrom);
      }

      showItems();
    }

    // ф-и клика на многоточия

    let rowId = 0;

    const onBeforeBtnClickHandler = function () {

      console.log('клик по кнопке before' );

      if(btnNext.hasAttribute("disabled")) {
        btnNext.removeAttribute("disabled");
      };

      if(btnAfter.classList.contains('hidden')) {
        btnAfter.classList.remove('hidden');
      }

      if(showMoreBtn.hasAttribute("disabled")) {
        showMoreBtn.removeAttribute("disabled");
      };

      rowId -= 1;

      if(rowId === 0 && !btnBefore.classList.contains('hidden')) { // проверить условие !!!!
        btnBefore.classList.add('hidden');
        btnPrev.setAttribute("disabled", "disabled");

        currentBtnId = rowId * step;
        itemsToShowFrom = currentBtnId * step;
        itemsToShow = itemsToShowFrom + step;

        for (let i = 0; i < btn.length; i++) { // оптимизировать !!!!!!!!!!!!
          if(!btn[i].classList.contains('hidden')) {
            btn[i].classList.add('hidden');
          }
        }

        for ( let i = 0; i < step - 1; i++){
          btn[i].classList.remove('hidden');
        }
      }

      else {
        currentBtnId = rowId * step - 1;

        for (let i = 0; i < btn.length; i++) { // оптимизировать !!!!!!!!!!!!
          if(!btn[i].classList.contains('hidden')) {
            btn[i].classList.add('hidden');
          }
        }

        for ( let i = currentBtnId; i < (currentBtnId + step); i++){
          btn[i].classList.remove('hidden');
        }
      }

      showItems();
    }

    const onAfterBtnClickHandler = function () {

      if(btnPrev.hasAttribute("disabled")) {
        btnPrev.removeAttribute("disabled");
      };

      if (btn.length - ((rowId+1) * step) > step) {
        btnBefore.classList.remove('hidden');

        rowId += 1;
        currentBtnId = rowId * step - 1;
        itemsToShowFrom = currentBtnId * step;
        itemsToShow = itemsToShowFrom + step;

        for (let i = 0; i < btn.length; i++) { // оптимизировать !!!!!!!!!!!!
          if(!btn[i].classList.contains('hidden')) {
            btn[i].classList.add('hidden');
          }
        }

        for ( let i = currentBtnId; i < currentBtnId + step; i++){
          btn[i].classList.remove('hidden');
        }
      }

      else {
        btnAfter.classList.add('hidden');

        rowId += 1;
        currentBtnId = rowId * step - 1;
        itemsToShowFrom = currentBtnId * step;
        itemsToShow =  itemsToShowFrom + step;

        for (let i = 0; i < btn.length; i++) { // оптимизировать !!!!!!!!!!!!
          if(!btn[i].classList.contains('hidden')) {
            btn[i].classList.add('hidden');
          }
        }

        for ( let i = currentBtnId; i < btn.length; i++){
          btn[i].classList.remove('hidden');
        }
      }

      showItems();
    }

    showMoreBtn.addEventListener("click", onShowMoreBtnClickHandler);

    btnNext.addEventListener("click", onBtnNextClickHandler);
    btnPrev.addEventListener("click", onBtnPrevClickHandler);
    btnAfter.addEventListener("click", onAfterBtnClickHandler);
    btnBefore.addEventListener("click", onBeforeBtnClickHandler);

    const btn = pagination.querySelectorAll(".pagination__btn");

    for ( let i = 0; i < btn.length; i++) {
      if(btn.length < step) {
        btnAfter.classList.add("hidden");
      } else {
        for (let k = step - 1; k < btn.length; k++) {
          btn[k].classList.add("hidden");
        }
      }

      btn[0].classList.add("active");
      btn[i].setAttribute("id", i);
      btn[i].addEventListener("click", onClickShowItemsHandler);
    }
  }
})();*/

"use strict";

(function () {
  const STARS_BOX_WIDTH = 80; // ширина контейнера со звезами
  const STAR_WIDTH = 16; // ширина одной звезды

  const scoreInput = document.getElementById('feedback-score'); // инпут с оценкой
  const starsBox  = document.querySelector('.modal__group-score-box .stars'); // контейнер со звезами
  const starsPosition  = document.querySelector('.modal__group-score-box .stars__wrapper'); // блок-обертка со всеми звездами

  const getCoords = function(e) {
    const starsBoxCoordsLeft = starsBox.getBoundingClientRect().left; // координаты контейнера со звездами относительно экрана
    const userClickCoords = e.clientX; // координаты клика пользователя по горизонтали

    let clickValue = userClickCoords - starsBoxCoordsLeft; // координаты клика от левого края контейнера со звездами
    let starsCount = Math.floor(clickValue / STAR_WIDTH) + 1; // делю координаты клика на ширину звезды и прибавляю единицу, тк мин оценка равна 1;

    scoreInput.value = starsCount; // записываю оценку в value инпута
    starsPosition.style.transform = 'translateX(-' + (STARS_BOX_WIDTH - (starsCount * STAR_WIDTH)) +'px)'; // передвигаю блок со звездами в видимую часть блока контейнера
  }

  if(starsBox) {
    starsBox.addEventListener('click', getCoords);
  }
})();

"use strict";

/*(function () {
  const btn = document.querySelectorAll('.stock__filter-box-btn');
  const stockItem = document.querySelectorAll('.stock__item');

  const sortItems = function () {
    console.log(this)
    console.log(this.getAttribute('id'));
    let type = this.getAttribute('id');

    for (let i = 0; i < stockItem.length; i++) {
      if(!stockItem[i].classList.contains('hidden')) {
        stockItem[i].classList.add('hidden');
      }

      if (stockItem[i].getAttribute('data-id') === type) {
        stockItem[i].classList.remove('hidden');
      }
    }
  }

  for (let i = 0; i < btn.length; i++) {
    btn[i].addEventListener('click', sortItems);
  }
})();*/

"use strict";

(function () {
  const item = document.querySelectorAll('.stock__filter-box-btn');

  const onClickHandler = function () {

    if(!this.classList.contains('stock__filter-box-btn--active')) {

      for(let i = 0; i < item.length; i++) {
        if(item[i].classList.contains('stock__filter-box-btn--active')) {
          item[i].classList.remove('stock__filter-box-btn--active')
        }
      }

      this.classList.add('stock__filter-box-btn--active');
    }
  }

  for (let i = 0; i < item.length; i++) {
    item[i].addEventListener('click', onClickHandler)
  }
})();

'use strict';

(function () {
  const isDealershipSlider = document.querySelector('.dealership-swiper-container');

  if (isDealershipSlider) {

    const indexPageSwiper = new Swiper ('.dealership-swiper-container', {
      // Optional parameters

      slidesPerView: 2,
      initialSlide: 2,
      centeredSlides: true,
      grabCursor: true,
      slideToClickedSlide: true,

      // Navigation arrows

      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },

      breakpoints: {
        // when window width is >= 836px
        836: {
          slidesPerView: 3,
        },
        // when window width is >= 1160px
        1160: {
          slidesPerView: 5,
        }
      }
    });
  }

  const isUrgentSlider = document.querySelector('.urgent-swiper-container');

  if (isUrgentSlider) {
    const urgentPageSwiper = new Swiper ('.urgent-swiper-container', {
      slidesPerView: 1,

      navigation: {
        nextEl: '.urgent-swiper-button-next',
        prevEl: '.urgent-swiper-button-prev',
      },

      breakpoints: {
        // when window width is >= 836px
        836: {
          slidesPerView: 2,
        },
        // when window width is >= 1160px
        1160: {
          slidesPerView: 3,
        }
      }
    });
  }

  const isCertificateSlider = document.querySelector('.certificate-swiper-container');

  if (isCertificateSlider) {
    const certificatePageSwiper = new Swiper ('.certificate-swiper-container', {
      slidesPerView: 2,
      initialSlide: 2,
      centeredSlides: true,
      grabCursor: true,
      slideToClickedSlide: true,

      breakpoints: {
        // when window width is >= 836px
        836: {
          slidesPerView: 3,
        },
        // when window width is >= 1160px
        1160: {
          slidesPerView: 5,
        }
      }
    });
  }

  const isArticlesSlider = document.querySelector('.articles-swiper-container');

  if (isArticlesSlider) {
    const articlePageSwiper = new Swiper ('.articles-swiper-container', {
      slidesPerView: 2,
      spaceBetween: 12,
      freeMode: true,

      breakpoints: {
        600: {
          slidesPerView: 3,
        },
        // when window width is >= 836px
        836: {
          slidesPerView: 5,
        },
        // when window width is >= 1160px
        1439: {
          slidesPerView: 3,
        }
      },

      pagination: {
        el: '.swiper-pagination',
        type: 'progressbar',
      },
    });
  }

  const isCableDescriptionSlider = document.querySelector('.cable-description-swiper-container');

  if (isCableDescriptionSlider) {
    const articlePageSwiper = new Swiper (isCableDescriptionSlider, {
      grabCursor: true,

      pagination: {
        el: '.swiper-pagination',
        dynamicBullets: true,
      },
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
    });
  }
})();

"use strict";

(function () {
  const tab = document.querySelectorAll('.workers__toggle-label');
  const list = document.querySelectorAll('.workers__list');

  const onClickHandler = function () {
    const attr = this.getAttribute('id');

    for (let i = 0; i < list.length; i++) {
      list[i].style.display = 'none';
      list[attr].style.display = 'flex';
    }
  }

  for (let i = 0; i < tab.length; i++) {
    tab[i].addEventListener('click', onClickHandler);
  }
})();
