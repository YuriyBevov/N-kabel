"use strict";

(function() {
  function remove() { this.parentNode && this.parentNode.removeChild(this); }
  if (!Element.prototype.remove) Element.prototype.remove = remove;
  if (Text && !Text.prototype.remove) Text.prototype.remove = remove;
})();

(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('before')) {
      return;
    }
    Object.defineProperty(item, 'before', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function before() {
        var argArr = Array.prototype.slice.call(arguments),
          docFrag = document.createDocumentFragment();

        argArr.forEach(function (argItem) {
          var isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });

        this.parentNode.insertBefore(docFrag, this);
      }
    });
  });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);

(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('prepend')) {
      return;
    }
    Object.defineProperty(item, 'prepend', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function prepend() {
        var argArr = Array.prototype.slice.call(arguments),
          docFrag = document.createDocumentFragment();

        argArr.forEach(function (argItem) {
          var isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });

        this.insertBefore(docFrag, this.firstChild);
      }
    });
  });
})([Element.prototype, Document.prototype, DocumentFragment.prototype]);

"use strict";

(function () {

  const esc_keycode = 27;

  function checkToRemoveClass(el, cls) {
    if(el.classList.contains(cls)) {
      el.classList.remove(cls);
    }
  }

  function checkToAddClass(el, cls) {
    if(!el.classList.contains(cls)) {
      el.classList.add(cls);
    }
  }

  function setActive(el) {
    if(el.hasAttribute("disabled")) {
      el.removeAttribute("disabled")
    }
  }

  function setInactive(el) {
    if(!el.hasAttribute("disabled")) {
      el.setAttribute("disabled", "disabled")
    }
  }

  function setInFocus (el) {
    el.focus();
  }

  function fileUpload(el, textPLace) {
    el.addEventListener("change", function(event) {
    const input = event.target;

    textPLace.textContent = input.files[0].name;
    });
  }

  window.util = {
    esc_keycode: esc_keycode,
    checkToRemoveClass: checkToRemoveClass,
    checkToAddClass: checkToAddClass,
    setActive: setActive,
    setInactive: setInactive,
    setInFocus: setInFocus,
    fileUpload: fileUpload
  };
})();

"use strict";

(function (){
  const pagination = document.querySelector(".pagination");

  function paginationInit() {
    const setActive = window.util.setActive;
    const setInactive = window.util.setInactive;
    const checkToAddClass = window.util.checkToAddClass;
    const checkToRemoveClass = window.util.checkToRemoveClass;

    // количество элементов в списке над пагинацией

    const list = pagination.previousElementSibling.children;
    const item = [];

    for ( let i = 0; i < list.length; i++) {
      checkToAddClass(list[i], "hidden");

      if ( list[i].hasAttribute("data-pagination") ) {
        list[i].classList.remove("hidden");
        item.push(list[i]);
      }
    }

    const itemCountToDraw = 3; // количество показываемых элементов на странице (можно менять)
    const btnCountStep = 10; // количество показываемых кнопок на странице (можно менять)

    let curBtnId = 0;
    let btnCount = btnCountStep;
    let itemToShowFrom = 0;
    let itemToShowTo = itemToShowFrom + itemCountToDraw;
    let storage = 0;

    // вычисляю сколько должно быть кнопок в пагинации
    const paginationBtnCount = Math.ceil(item.length / itemCountToDraw);

    // скрытие лишних элементов списка,

    const startDrawing = function () {
      if(item.length > itemCountToDraw) {
        for (let i = 0; i < item.length; i++) {
          item[i].classList.add("hidden");
        }

        for (let i = 0; i < itemCountToDraw; i++) {
          item[i].classList.remove("hidden");
        }
      }
    }();

//стартовое создание и отрисовка кнопок пагинации

    function createPagination() {

      const fragment = document.createDocumentFragment();
      const template = document.getElementById("pagination-template");

      const templateClone = template.cloneNode(true);
      templateClone.removeAttribute("id");
      templateClone.setAttribute("id", "pagination");
      templateClone.style.display ="flex";

      const paginationBtnsPlace = templateClone.querySelector(".pagination__btn-after");

        for (let i = 0; i < paginationBtnCount; i++) {
          const btn = document.createElement("a");

          btn.setAttribute("href", "#");
          btn.setAttribute("data-id", i);
          btn.className = "pagination__btn";
          btn.textContent = i + 1;
          paginationBtnsPlace.before(btn);
        }

      fragment.appendChild(templateClone);
      pagination.prepend(fragment)

      if (paginationBtnCount <= 1) { // меньше или равно одной , тк зачем показывать если всего одна кнопка
        checkToAddClass(pagination, "hidden")
      } else {
        checkToRemoveClass(pagination, "hidden")
      }
    }

    createPagination();

    const showMoreBtn = pagination.querySelector(".pagination__show-btn");
    const btnAfter = document.querySelector(".pagination__btn-after");
    const btnPrev = document.querySelector(".pagination__btn-prev");
    const btnNext = document.querySelector(".pagination__btn-next");
    const paginationBtn = pagination.querySelectorAll(".pagination__btn");

    // вешаю слушателей на созданные кнопки и показываю первый ряд кнопок

    const startDrawPagBtns =  function () {
      btnPrev.setAttribute("disabled", "disabled");
      for (let i = 0; i < paginationBtn.length; i++) {
        paginationBtn[0].classList.add("active");
        paginationBtn[i].addEventListener("click", onPaginationBtnClickHandler);
      }

      if (paginationBtn.length > btnCountStep) {
        for (let i = btnCount; i < paginationBtn.length; i++) {
          paginationBtn[i].classList.add("hidden");
          btnAfter.textContent = "... " + ( i + 1);
          btnAfter.classList.remove("hidden");
        }
      }
    };

    // функции отрисовки нужного интервала

    function updateItemsIntervalToDraw(id) {
      // item = pagination-ready list

      for (let i = 0; i < item.length; i++) {
        checkToAddClass(item[i], "hidden");
      }

      if (id == 0) {
        setInactive(btnPrev);
      }

      itemToShowFrom = id * itemCountToDraw;
      itemToShowTo = itemToShowFrom + itemCountToDraw;

      if (itemToShowTo > item.length) {
        itemToShowTo = item.length;
      }

      drawFunc(itemToShowFrom, itemToShowTo, item);
    }

    function drawFunc (from, to, el) {
      for (let i = from; i < to; i++) {
        el[i].classList.remove("hidden");
      }
    }

    function hideFunc (from, to, el) {
      for (let i = from; i < to; i++) {
        el[i].classList.add("hidden");
      }
    }

    function setActivePaginationBtn(id) {
      for(let i = 0; i < paginationBtn.length; i++) {
        checkToRemoveClass(paginationBtn[i], "active");
      }
      paginationBtn[id].classList.add("active");
    }

    // ф-и фильтрации рядов кнопок

    function nextBtnRow() {
      // ф-я скрытия предыдущего ряда

      let startBtnToHide = btnCount - btnCountStep;
      let lastBtnToHide = btnCount;

      hideFunc(startBtnToHide, lastBtnToHide, paginationBtn);

      // ф-я отрисовки нового ряда
      let startBtnToDraw = btnCount;

      btnCount += btnCountStep;

      let lastBtnToDraw = btnCount;

      if (paginationBtn.length - lastBtnToDraw < 0 ) {
        lastBtnToDraw = paginationBtn.length;

        checkToAddClass(btnAfter, "hidden");
        drawFunc(startBtnToDraw, lastBtnToDraw, paginationBtn);
      } else {
        drawFunc(startBtnToDraw, lastBtnToDraw, paginationBtn);
      }
    }

    function prevBtnRow() {
      let startBtnToHide = btnCount - btnCountStep;
      let lastBtnToHide = btnCount;

      if( paginationBtn.length - btnCount < 0 ) {
        lastBtnToHide = paginationBtn.length;
        setActive(showMoreBtn);
        checkToRemoveClass(btnAfter, "hidden");
      }

      hideFunc(startBtnToHide, lastBtnToHide, paginationBtn);

      let startBtnToDraw = (curBtnId - btnCountStep) + 1;
      let lastBtnToDraw = startBtnToDraw + btnCountStep;

      btnCount -= btnCountStep;

      if (startBtnToDraw < 0) {
        startBtnToDraw = 0;
        btnCount = btnCountStep - 1;
      }

      drawFunc(startBtnToDraw, lastBtnToDraw, paginationBtn);
    }

    const onShowMoreBtnClickHandler = function () {
      // показывает + itemCountToDraw  эл-в на стр

      curBtnId++;
      setActivePaginationBtn(curBtnId);
      setActive(btnPrev);

      storage = curBtnId;

      if (btnCount === curBtnId) { // проверка ряда
        nextBtnRow();
      }

      if(curBtnId === paginationBtn.length - 1) {
        setInactive(btnNext);
        setInactive(showMoreBtn);
      }

      itemToShowFrom = storage * itemCountToDraw;
      itemToShowTo = itemToShowFrom + itemCountToDraw;

      if (itemToShowTo > item.length) {
        itemToShowTo = item.length;
      }

      drawFunc(itemToShowFrom, itemToShowTo, item);
    }

    const onAfterBtnClickHandler = function (evt) {
      evt.preventDefault();
      // листает на последнюю стр-цу

      btnCount = (Math.floor(paginationBtn.length / btnCountStep) + 1) * btnCountStep; // верно !!

      let startBtnToDraw = Math.floor(paginationBtn.length / btnCountStep) * btnCountStep;
      let lastBtnToDraw = paginationBtn.length;
      let startBtnToHide = 0;
      let lastBtnToHide = startBtnToDraw;

      hideFunc(startBtnToHide, lastBtnToHide, paginationBtn);
      drawFunc(startBtnToDraw, lastBtnToDraw, paginationBtn);

      curBtnId = paginationBtn.length - 1;
      setActivePaginationBtn(curBtnId);

      checkToAddClass(btnAfter, "hidden");
      setInactive(btnNext);
      setInactive(showMoreBtn);
      setActive(btnPrev);

      updateItemsIntervalToDraw(curBtnId);
    }

    const onPrevBtnClickHandler = function () {
      // листает на 1 стр назад

      curBtnId--;
      setActivePaginationBtn(curBtnId);

      setActive(btnNext);
      setActive(showMoreBtn);

      if ((btnCount - curBtnId) === btnCountStep + 1) { // проверка ряда
        prevBtnRow();
      }

      updateItemsIntervalToDraw(curBtnId)
    }

    const onNextBtnClickHandler = function () {
      // листает на 1 стр вперед

      curBtnId++;
      setActivePaginationBtn(curBtnId);

      if(curBtnId === paginationBtn.length - 1) {
        setInactive(btnNext);
        setInactive(showMoreBtn);
      } else {
        setActive(showMoreBtn);
      }

      setActive(btnPrev);

      if (btnCount === curBtnId) { // проверка ряда
        nextBtnRow();
      }

      updateItemsIntervalToDraw(curBtnId);
    }

    const onPaginationBtnClickHandler = function (evt) {
      evt.preventDefault();
      // листает на выбранную стр

      curBtnId = this.getAttribute("data-id");
      setActivePaginationBtn(curBtnId);

      if (this.getAttribute("data-id") !== 0) {
        setActive(btnPrev);
      }

      if (curBtnId == paginationBtn.length - 1) {
        setInactive(showMoreBtn);
        setInactive(btnNext);
      } else {
        setActive(showMoreBtn);
        setActive(btnNext);
      }

      updateItemsIntervalToDraw(curBtnId);
    }

    showMoreBtn.addEventListener("click", onShowMoreBtnClickHandler);
    btnAfter.addEventListener("click", onAfterBtnClickHandler);
    btnPrev.addEventListener("click", onPrevBtnClickHandler);
    btnNext.addEventListener("click", onNextBtnClickHandler);

    startDrawPagBtns();
  }

  if (pagination) {
    paginationInit();
  }

  const paginationDestroy = function () {
    const pagination = document.getElementById("pagination");

    pagination.remove();
  }

  window.pagination = {
    paginationInit: paginationInit,
    paginationDestroy: paginationDestroy
  }
})();

"use strict";

(function () {
  const checkToRemoveClass = window.util.checkToRemoveClass;
  const checkToAddClass = window.util.checkToAddClass;

  let isValidMail = false;
  let isAcceptedRules = true;

  function validateEmail(el, color) {
    let val = el.value;

    const reg = /^[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}$/i;

    if(!reg.test(val)) {
      isValidMail = false;
      el.style.color = "#f1b0b0";
      el.style.outline = "2px solid rgb(93, 16, 7)";

      checkToAddClass(el, "form-invalid");
      setTimeout(checkToRemoveClass, 1000, el, "form-invalid");
    } else {
      isValidMail = true;
      el.style.color = color;
      el.style.outline = "none";
      checkToRemoveClass(el, "form-invalid");
    }
  }

  function onCheckedValidate(el, color) {
    const label = el.nextElementSibling;

    if(!el.checked) {
      isAcceptedRules = false;
      label.style.color = "#f1b0b0";
      label.style.outline = "2px solid rgb(93, 16, 7)";

      checkToAddClass(label, "form-invalid");
      setTimeout(checkToRemoveClass, 1000, label, "form-invalid");
    }

    function removeInvalidColor() {
      if(el.checked) {
        isAcceptedRules = true;
        label.style.color = color;
        label.style.outline = "none";
        checkToRemoveClass(label, "form-invalid");
      }
      el.removeEventListener("change", removeInvalidColor);
    }

    el.addEventListener("change", removeInvalidColor)
  }

  function checking(mail, check, color, form) {
    validateEmail(mail, color);
    onCheckedValidate(check, color);

    if (isValidMail == true && isAcceptedRules ==  true) {
      form.submit();
    }
  }

  window.validation = {
    checking: checking,
    validateEmail: validateEmail
  }
})();

"use strict";

(function () {
  const checking = window.validation.checking;
  const validateEmail = window.validation.validateEmail;

  // форма в футере

  const footerForm = document.querySelector(".footer-form__form");
  const footerFormMailInput = document.getElementById("footer-form__mail");
  const footerAcceptRules = document.getElementById("footer-form__accept-rules");
  const footerFormSubmit = document.querySelector(".footer-form__submit-btn");

  if (footerFormMailInput) {
    footerFormMailInput.addEventListener("change", function() {
      validateEmail(footerFormMailInput, "#ffffff");
    });

    footerFormSubmit.addEventListener("click", function(evt) {
      evt.preventDefault();
      checking(footerFormMailInput, footerAcceptRules, "#ffffff", footerForm);
    });
  }

  // форма на главной

  const aboutForm = document.querySelector(".about-form");
  const aboutFormMailInput = document.getElementById("about-form__email");
  const aboutAcceptRules = document.getElementById("about-form__accept-rules");
  const aboutModalSubmit = document.querySelector(".about-form__submit-btn");

  if (aboutFormMailInput) {
    aboutFormMailInput.addEventListener("change", function() {
      validateEmail(aboutFormMailInput, "#000000");
    });

    aboutModalSubmit.addEventListener("click", function(evt) {
      evt.preventDefault();
      checking(aboutFormMailInput, aboutAcceptRules, "#000000", aboutForm);
    });
  }

  // форма в модалке заказа

  const orderModalForm = document.querySelector(".order-modal form");
  const orderModalMailInput = document.getElementById("order-modal-mail");
  const orderAcceptRules = document.getElementById("order-modal-accept");
  const orderModalSubmit = document.querySelector(".order-modal button");

  if (orderModalMailInput) {
    orderModalMailInput.addEventListener("change", function() {
      validateEmail(orderModalMailInput, "#ffffff");
    });

    orderModalSubmit.addEventListener("click", function(evt) {
      evt.preventDefault();
      checking(orderModalMailInput, orderAcceptRules, "#ffffff", orderModalForm);
    });
  }

  // форма в модалке отзывов

  const feedbackModalForm = document.querySelector(".feedback-modal form");
  const feedbackModalMailInput = document.getElementById("feedback-mail");
  const feedbackAcceptRules = document.getElementById("feedback-accept-rules");
  const feedbackModalSubmit = document.querySelector(".feedback-modal button");

  if (feedbackModalMailInput) {
    feedbackModalMailInput.addEventListener("change", function() {
      validateEmail(feedbackModalMailInput, "#ffffff");
    });

    feedbackModalSubmit.addEventListener("click", function(evt) {
      evt.preventDefault();
      checking(feedbackModalMailInput, feedbackAcceptRules, "#ffffff", feedbackModalForm);
    });
  }
})();

"use strict";

(function () {
  const checkToAddClass = window.util.checkToAddClass;
  const checkToRemoveClass = window.util.checkToRemoveClass;
  const paginationInit = window.pagination.paginationInit;
  const paginationDestroy = window.pagination.paginationDestroy;

  const btn = document.querySelectorAll(".stock__filter-box-btn");
  const stockItem = document.querySelectorAll(".stock__item");

  const sortItems = function () {

    paginationDestroy();

    let type = this.getAttribute("id");

    for (let i = 0; i < stockItem.length; i++) {
      checkToAddClass(stockItem[i], "hidden");
      if(stockItem[i].hasAttribute("data-pagination")) {
        stockItem[i].removeAttribute("data-pagination")
      }

      if (stockItem[i].getAttribute("data-id") === type) {
        stockItem[i].classList.remove("hidden");
        stockItem[i].setAttribute("data-pagination", "ready");
      }
    }

    paginationInit();
  }

  for (let i = 0; i < btn.length; i++) {
    btn[i].addEventListener("click", sortItems);
  }
})();

"use-strict";

(function() {
  const fileUpload = window.util.fileUpload;

  const input = document.getElementById("about-form-file-upload");
  const fileName = document.querySelector(".about-form__upload-btn");

  if (input) {
    fileUpload(input, fileName);
  }
})();

"use strict";

(function () {

  const picker = document.querySelectorAll(".cable-description__pick-list input");
  const descriptionItem = document.querySelectorAll(".cable-description__description-item");

  for (let i = 1; i < descriptionItem.length; i++) {
    descriptionItem[i].style.display = "none";
  }

  const onClickHandler = function () {
    const itemId = this.getAttribute("data-id");

    for (let i = 0; i < descriptionItem.length; i++) {
      descriptionItem[i].style.display = "none";
      descriptionItem[itemId].style.display = "block";
    }
  }

  for (let i = 0; i < picker.length; i++) {
    picker[i].addEventListener("click", onClickHandler);
  }
})();

"use strict";

(function() {
  const select = document.querySelector(".contacts__select");
  const content = document.querySelectorAll(".contacts__content");

  const onChangeHandler = function () {
    let attr = this.options[select.selectedIndex].id;

    for (let i = 0; i < content.length; i++) {
      content[i].style.display = "none";
      content[attr].style.display = "flex";
    }
  }

  if (select) {
    select.addEventListener("change", onChangeHandler)
  }
})();

"use-strict";

(function() {
  const fileUpload = window.util.fileUpload;

  const input = document.getElementById("footer-form-file-upload");
  const fileName = document.querySelector(".footer-form__upload-btn");

  if (input) {
    fileUpload(input, fileName);
  }
})();

"use strict";

(function () {
  const checkToAddClass = window.util.checkToAddClass;

  const btn =  document.querySelectorAll(".geo-position__item-extra-btn");

  const closeGeoList = function () {
    for (let i = 0; i < btn.length; i++) {
      btn[i].removeEventListener("click", closeGeoList);
      btn[i].addEventListener("click", openGeoList);
    };
    this.nextElementSibling.classList.add("hidden");
  }

  const openGeoList = function () {
    for (let i = 0; i < btn.length; i++) {
      checkToAddClass(btn[i].nextElementSibling, "hidden");
    };

    this.removeEventListener("click", openGeoList);
    this.nextElementSibling.classList.remove("hidden");
    this.addEventListener("click", closeGeoList);
  };

  if(btn) {
    for (let i = 0; i < btn.length; i++) {
      btn[i].nextElementSibling.classList.add("hidden");
      btn[i].addEventListener("click", openGeoList);
    };
  }
})();

"use strict";

(function () {
  const esc_keycode = window.util.esc_keycode;
  const checkToAddClass = window.util.checkToAddClass;

  const openBtn = document.getElementById("menu-show-btn");
  const closeBtn = document.getElementById("menu-close-btn");
  const nav = document.querySelector(".nav");
  const overflow = document.querySelector(".nav__wrapper");

  const companyItem = document.querySelector(".nav__item--company");
  const companyBtn = companyItem.querySelector(".nav__link--company");
  const companyList = companyItem.querySelector("ul");

  nav.classList.add("closed"); // закрываю меню после загрузки страницы
  companyList.classList.add("closed"); // закрываю подменю после загрузки страницы

  // удаление слушателей с документа, возвращение первоначального вида

  const removeEventListeners = function () {
    document.removeEventListener("click", hideByClick);
    document.removeEventListener("keydown", hideByEsc);

    checkToAddClass(companyList, "closed");
    openBtn.addEventListener("click", openMenuByClick);
  }

  const showCompanyList = function() {
    companyList.classList.toggle("closed");
  }

  const openMenuByClick = function (evt) {
    evt.stopPropagation();
    nav.classList.remove("closed");
    document.addEventListener("click", hideByClick);
    document.addEventListener("keydown", hideByEsc);

    openBtn.removeEventListener("click", openMenuByClick);
    closeBtn.addEventListener("click", closeMenuByClick);
  }

  const closeMenuByClick = function () {
    nav.classList.add("closed");
    closeBtn.removeEventListener("click", closeMenuByClick);

    removeEventListeners();
  }

  //--- функции закрытия по клику и пустому месту

  const hideByClick = function (evt) {
    const nav__menu = evt.target == nav || nav.contains(evt.target);

    if (!nav__menu) {
      nav.classList.add("closed");

      removeEventListeners();
    }
  }

  const hideByEsc = function (evt) {
    if (evt.keyCode === esc_keycode) {
      nav.classList.add("closed");

      removeEventListeners();
    }
  };

  openBtn.addEventListener("click", openMenuByClick);
  companyBtn.addEventListener("click", showCompanyList);
})();

"use strict";

(function () {
  const loader = document.querySelector(".loader");

  const hideLoader = function () {
    setTimeout(endLoading, 700)
    function endLoading () {
      loader.style.display = "none";
      clearTimeout(hideLoader);
      document.removeEventListener("DOMContentLoaded", hideLoader);
    }
  };

  document.addEventListener("DOMContentLoaded", hideLoader);
})();

"use strict";

(function () {
  const esc_keycode = window.util.esc_keycode;
  const fileUpload = window.util.fileUpload;

  const orderBtn = document.querySelectorAll(".order-btn");
  const orderModal = document.querySelector(".order-modal");
  const feedbackBtn = document.querySelectorAll(".feedback__btn");
  const feedbackModal = document.querySelector(".feedback-modal");

  let modal = null; // тут будет активная модалка

  const removeEventListeners = function () {
    document.removeEventListener("click", hideByClick);
    document.removeEventListener("keydown", hideByEsc);
  }

  const showByClick = function (el) {
    el.classList.remove("hidden")

    const closeBtn = modal.querySelector(".modal__closeBtn");

    document.addEventListener("click", hideByClick);
    document.addEventListener("keydown", hideByEsc);

    closeBtn.addEventListener("click", closeByBtnClick)
  }

  const hideByClick = function (evt) {
    if(evt.target === modal) {
      modal.classList.add("hidden");

      removeEventListeners();
      modal = null;
    }
  }

  const closeByBtnClick = function () {
    modal.classList.add("hidden");

    removeEventListeners();
    modal = null
    this.removeEventListener("click", closeByBtnClick);
  }

  const hideByEsc = function (evt) {
    if (evt.keyCode === esc_keycode) {
      modal.classList.add("hidden");

      removeEventListeners();
      modal = null;
    }
  };

  for (let i = 0; i < orderBtn.length; i++) {
    orderBtn[i].addEventListener("click", function (evt) {
      evt.preventDefault();
      modal = orderModal;
      showByClick(modal);
    })
  }

  for (let i = 0; i < feedbackBtn.length; i++) {
    feedbackBtn[i].addEventListener("click", function (evt) {
      evt.preventDefault();
      modal = feedbackModal;
      showByClick(modal);
    })
  }

  const input = document.querySelector(".modal__group--upload input");
  const fileName = document.querySelector(".modal__group--upload label");

  if (input) {
    fileUpload(input, fileName);
  }
})();

"use strict";

(function() {

  Modernizr.on("webp", function() {
  });

})();

"use strict";

(function () {
  const STARS_BOX_WIDTH = 80; // ширина контейнера со звезами
  const STAR_WIDTH = 16; // ширина одной звезды

  const scoreInput = document.getElementById("feedback-score"); // инпут с оценкой
  const starsBox  = document.querySelector(".modal__group-score-box .stars"); // контейнер со звезами
  const starsPosition  = document.querySelector(".modal__group-score-box .stars__wrapper"); // блок-обертка со всеми звездами

  const getCoords = function(e) {
    const starsBoxCoordsLeft = starsBox.getBoundingClientRect().left; // координаты контейнера со звездами относительно экрана
    const userClickCoords = e.clientX; // координаты клика пользователя по горизонтали

    let clickValue = userClickCoords - starsBoxCoordsLeft; // координаты клика от левого края контейнера со звездами
    let starsCount = Math.floor(clickValue / STAR_WIDTH) + 1; // делю координаты клика на ширину звезды и прибавляю единицу, тк мин оценка равна 1;

    scoreInput.value = starsCount; // записываю оценку в value инпута
    starsPosition.style.transform = "translateX(-" + (STARS_BOX_WIDTH - (starsCount * STAR_WIDTH)) +"px)"; // передвигаю блок со звездами в видимую часть блока контейнера
  }

  if(starsBox) {
    starsBox.addEventListener("click", getCoords);
  }
})();

"use strict";

(function (){
  // добавление фокуса к анимированным кнопкам заказа, для возможности заказа с клавиатуры

  const btn = document.querySelectorAll(".order-btn");

  function setBtnBoxInFocus () {
    this.parentNode.classList.add("active");
    this.addEventListener("blur", function() {
      this.parentNode.classList.remove("active")
    });
  }

  if (btn) {
    for (let i = 0; i < btn.length; i++) {
      if(btn[i].parentNode.classList.contains("analogs__item-box") || btn[i].parentNode.classList.contains("stock__item-box")) {
        btn[i].addEventListener("focus", setBtnBoxInFocus)
      }
    }
  }
})();

"use strict";
// активация активной кнопки в фильтре н аглавной
(function () {
  const checkToRemoveClass = window.util.checkToRemoveClass;

  const item = document.querySelectorAll(".stock__filter-box-btn");

  const onClickHandler = function () {
    if(!this.classList.contains("stock__filter-box-btn--active")) {
      for(let i = 0; i < item.length; i++) {
        checkToRemoveClass(item[i], "stock__filter-box-btn--active");
      }
      this.classList.add("stock__filter-box-btn--active");
    }
  }

  for (let i = 0; i < item.length; i++) {
    item[i].addEventListener("click", onClickHandler)
  }
})();

"use strict";

(function () {
  const isDealershipSlider = document.querySelector(".dealership-swiper-container");

  if (isDealershipSlider) {

    const indexPageSwiper = new Swiper (".dealership-swiper-container", {
      // Optional parameters

      slidesPerView: 2,
      initialSlide: 2,
      centeredSlides: true,
      grabCursor: true,
      slideToClickedSlide: true,

      // Navigation arrows

      navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev",
      },

      breakpoints: {
        // when window width is >= 836px
        836: {
          slidesPerView: 3,
        },
        // when window width is >= 1160px
        1160: {
          slidesPerView: 5,
        }
      }
    });
  }

  const isUrgentSlider = document.querySelector(".urgent-swiper-container");

  if (isUrgentSlider) {
    const urgentPageSwiper = new Swiper (".urgent-swiper-container", {
      slidesPerView: 1,

      navigation: {
        nextEl: ".urgent-swiper-button-next",
        prevEl: ".urgent-swiper-button-prev",
      },

      breakpoints: {
        // when window width is >= 836px
        836: {
          slidesPerView: 2,
        },
        // when window width is >= 1160px
        1160: {
          slidesPerView: 3,
        }
      }
    });
  }

  const isCertificateSlider = document.querySelector(".certificate-swiper-container");

  if (isCertificateSlider) {
    const certificatePageSwiper = new Swiper (".certificate-swiper-container", {
      slidesPerView: 2,
      initialSlide: 2,
      centeredSlides: true,
      grabCursor: true,
      slideToClickedSlide: true,

      breakpoints: {
        // when window width is >= 836px
        836: {
          slidesPerView: 3,
        },
        // when window width is >= 1160px
        1160: {
          slidesPerView: 5,
        }
      }
    });
  }

  const isArticlesSlider = document.querySelector(".articles-swiper-container");

  if (isArticlesSlider) {
    const articlePageSwiper = new Swiper (".articles-swiper-container", {
      slidesPerView: 2,
      spaceBetween: 12,
      freeMode: true,

      breakpoints: {
        600: {
          slidesPerView: 3,
        },
        // when window width is >= 836px
        836: {
          slidesPerView: 5,
        },
        // when window width is >= 1160px
        1439: {
          slidesPerView: 3,
        }
      },

      pagination: {
        el: ".swiper-pagination",
        type: "progressbar",
      },
    });
  }

  const isCableDescriptionSlider = document.querySelector(".cable-description-swiper-container");

  if (isCableDescriptionSlider) {
    const articlePageSwiper = new Swiper (isCableDescriptionSlider, {
      grabCursor: true,

      pagination: {
        el: ".swiper-pagination",
        dynamicBullets: true,
      },
      navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev",
      },
    });
  }

  const isFeedbackSlider = document.querySelector(".feedback-swiper-container");

  if (isFeedbackSlider) {
    const feedbackInit = document.getElementById("feedbacks");

    const feedbackSliderInit = function () {
      feedbackInit.removeEventListener("click", feedbackSliderInit);

      const feedbackPageSwiper = new Swiper(isFeedbackSlider, {
        direction: "vertical",
        slidesPerView: "auto",
        freeMode: true,
        scrollbar: {
          el: ".swiper-scrollbar",
        },
        mousewheel: true,
      });
    }

    feedbackInit.addEventListener("click", feedbackSliderInit)
  }
})();

"use strict";

(function () {

  const tab = document.querySelectorAll(".workers__toggle-label");
  const list = document.querySelectorAll(".workers__list");

  const onClickHandler = function () {
    const attr = this.getAttribute("id");

    for (let i = 0; i < list.length; i++) {
      list[i].style.display = "none";
      list[attr].style.display = "flex";
    }
  }

  for (let i = 0; i < tab.length; i++) {
    tab[i].addEventListener("click", onClickHandler);
  }

})();
